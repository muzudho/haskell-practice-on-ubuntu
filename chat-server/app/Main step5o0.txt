-- in Main.hs
module Main where

import Network.Socket

-- in the imports our Main.hs add:
import System.IO

-- add to our imports:
import Control.Concurrent

-- in Main.hs
type Msg = String

-- メイン
main :: IO ()
main = do
    sock <- socket AF_INET Stream 0    -- create socket
    setSocketOption sock ReuseAddr 1   -- make socket immediately reusable - eases debugging.
    bind sock (SockAddrInet 4242 iNADDR_ANY)   -- listen on TCP port 4242.
    listen sock 2                              -- set a max of 2 queued connections
    chan <- newChan        -- notice that newChan :: IO (Chan a)
    mainLoop sock chan     -- pass it into the loop

-- メインループ
mainLoop :: Socket -> Chan Msg -> IO ()   -- See how Chan now uses Msg.
mainLoop sock chan = do
    conn <- accept sock         -- accept a connection and handle it
    forkIO (runConn conn chan)  -- run our server's logic. split off each connection into its own thread. pass the channel to runConn
    mainLoop sock chan          -- repeat

-- and we'll change our `runConn` function to look like:
runConn :: (Socket, SockAddr) -> IO ()
runConn (sock, _) = do
    hdl <- socketToHandle sock ReadWriteMode
    hSetBuffering hdl NoBuffering
    hPutStrLn hdl "Hello!"
    hClose hdl
